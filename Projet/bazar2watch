Lisp TO LI

;(load "lisp2li.lsp")

(defun lisp2li (expr env)
  (if (atom expr)
      (if (constantp expr) ;vrai si != symbol pouvant servir de variable
          ;cas literal
          (cons :LIT expr)
          ;sinon cas symbol
          (let ((pos(position expr env)))
            (if pos
                (cons :VAR (+ 1 pos))
                (warn "Erreur variable"))))
      ;cellule
      (let ((fun (car expr))
            (args (cdr expr)))
        (if (not (symbolp fun))
            (if (and (consp fun) (eq 'lambda (car fun)))
                ;cas lambda expression a voir plus tard
                (warn "cas lambda expression NYI")
                (warn "c'est pas une fonction"))
            
            (if (get-defun fun)
                (cons :MCALL (cons fun (map-lisp2li args env)))
                ;cas symbol
                (if (not (fboundp fun))
                    (list :UNKNOWN expr env)
                    ;cas fboundp
                    (if (eq fun 'quote)
                        (cons :LIT (first args))
                        (if (eq fun 'if)
                            (list :IF (lisp2li (first args) env)
                                  (lisp2li (second args) env)
                                  (lisp2li (third args) env))                                                                                                                    
                            (if (eq fun 'defun)
                                `(:CALL set-defun 
                                        (:LIT . ,(car args)) 
                                        (:LIT . (:LAMBDA , (+ 1 (length (second args))) 
                                                         , (lisp2li (third args) (second args)))))
                                (if (eq fun 'progn)
                                    (cons :progn (map-lisp2li (cdr expr) env))
                                    (if (macro-function fun)
                                        (lisp2li (macroexpand-1 expr) env)
                                        (if (special-form-p fun)
                                            (warn "~s NYI" fun)
                                            (cons :CALL
                                                  (cons fun
                                                        (map-lisp2li args env)))))))))))))))

(defun map-lisp2li (expr env)
  (if (atom expr)
      ()
      (cons (lisp2li (car expr) env) (map-lisp2li (cdr expr) env))))

(defun get-defun (symb)
  (get symb :defun))

(defun set-defun (symb fun)
  (setf (get symb :defun) fun))






















EVAL LI

(require "./lisp2li.lisp")


(defun meval (code env)
  (eval-li (lisp2li code env) #(() ) ))



(defun eval-li(expr env)
  (if (atom expr)
      (error "Pas une expression ~s" expr)
      (ecase (car expr)
             (:LIT (cdr expr))
             (:VAR (aref env (cdr expr)))
             (:SET-VAR (error "NYI"))
             (:IF (if (eval-li (second expr) env)
                      (eval-li (third expr) env)
                      (eval-li (fourth expr) env)))
             (:CALL (apply (symbol-function (second expr))
                           (map-eval-li (cddr expr) env)))
             (:MCALL (let ((fun (get-defun (second expr))))
                       (eval-li (third fun)
                                (make-eval-li-env (map-eval-li (cddr expr) env) (second fun)))))
             (:PROGN (map-eval-li-progn (cdr expr)))
             (:UNKNOWN (let ((hexpr (lisp2li (second expr) (third expr))))
                         (if (eq (car hexpr) :UNKNOWN)
                             (error "unknown ~s" hexpr)
                             (eval-li (displace expr hexpr) env)))))))

(defun map-eval-li (expr env)
  (if (null expr)
      ()
      (cons (eval-li (car expr) env) (map-eval-li (cdr expr) env))))

(defun map-eval-li-progn (expr)
  ())

;a revoir, le premier element est nil, il faut que ce soit un tableau vide...
(defun make-eval-li-env (liste taille)
  ; On crée un tableau avec un environnement, le premier element est une liste
  ; vide, les autres élément arrivent ensuite
  (let ((tableau (make-array taille)))
    (labels ((fun (listeValeur i)
                  (if (null listeValeur)
                      ()
                      (progn (setf (aref tableau i) (car listeValeur))
                             (fun (cdr listeValeur) (+ i 1))))))
            (fun liste 1))
    ;(print tableau)
    tableau))

(defun displace (expr mexpr)
  (setf (car expr) (car mexpr)
        (cdr expr)(cdr mexpr)) 
  expr)
























LI TO VM

;; Created on 2012-11-23 10:27:35
	

	(require "lisp2li.lisp")
	;(comp '(defun fibo (n) (if (<= n 0) 1 (+ (fibo (- n 1)) (fibo (- n 2))))))
	

	;(load "C:/Users/Marama/workspace/IN108Project/litoasm.lisp")
	;(load "/auto_home/dvaret/workspace/LispProjet/litoasm.lisp")
	

	;li -> langage vm
	;(litoasm '(:CALL + (:CONST 1) (:CONST 2)) ())
	

	;(1 SOM ((:CALL +) (:VAR 0) (:CONST 1)))
	;(comp '(defun fact (n) (if (<= n 0) 1 (* n (fact (- n 1))))))
	;(comp '(cond ((< 0 1) 0) ((> 0 1) 1)))
	

	;(comp '(defun t0 (n) (if (<= n 0) (+ n n) (* (t0 (- n 1)) n))))
	;(comp '(defun fibof (n x y) (if (<= n 0) y (fibof (- n 1) y (+ x y)))))
	;(lisp2li '(defun fibo20 (n x y) (if (<= n 0) y (fibo20 (- n 1) y (+ x y)))) ())
	

	;(lisp2li '(defun t20 (n) (if (<= n 0) (+ n n) (* (t20 (- n 1)) n))) ())
	;(comp '(defun  fct (n) (progn (+ 1 2) (+ 2 3) (+ 3 4) (+ 4 n))))
	

	(defun comp (expr)
	 (print (lisp2li expr ()))
	  ;(print :)
	  (litoasm (lisp2li expr ()) ()))
	

	(defun litoasm (expr env)
	  (if (numberp (first expr))
	    (let ((name (second expr)) (args (third expr)))
	      (append
	        (list (list :label name) (list :stack (first expr)))
	        (litoasm args env)
	        (list (list :rtn))))
	    (case (first expr)
	      (:if
	        (append
	          (litoasm (second expr) env)
	          (list (list :skipnil (+ 1 (length (litoasm (copy-list (third expr)) env))))) ; + 1 ?
	          (litoasm (third expr) env)
	          (list (list :rtn))
	          (litoasm (fourth expr) env)
	          ))
	      (:call
	        ;(print expr)
	        (let ((ll (length (third expr))))
	          (if(= ll 0)
	          (list (list :call (second expr)))
	          (if (= ll 1)
	            (append
	              (maplitoasm (third expr) env)
	              (list (list :call (second expr))))
	            (append
	              (maplitoasm (third expr) env)
	              (calltoasm (second expr) ll))))))
	      (:mcall
	        (append
	          (maplitoasm (third expr) env)
	          (list (list :call (second expr)))))
	      (:const (list (list :const (second expr))))
	      (:var (list (list :var (second expr))))
	      (:progn 
	        ;(print (first (rest (first (rest expr)))))
	        (maplitoasm (first (rest expr)) env))
	      ;(vmeval 'vm '(defun loop_test (li n) (loop for cel in li do (atom cel))))
	      ;(comp '(defun loop_test (li n) (loop for cel in li do (atom cel))))
	      ;(lisp2li '(defun loop_test (li n) (loop for cel in li do (atom cel))) ())
	      (:loop
	        (append
	          ;(print env)
	          (list (list :label (third expr)))
	          (litoasm (second expr) env)
	          (list (list :call 'car))
	          (list (list :call 'atom))
	          (list (list :skiptrue (+ 1 (length (litoasm (copy-list (fourth expr)) env)))))
	          (litoasm (fourth expr) env)
	          (litoasm (fifth expr) env)
	          (list (list :jump (third expr)))
	          ))
	      (:setf ())
	      (:set-var 
	        (append
	          (litoasm (third expr) env)
	          (list (list :set-var (second (second expr))))
	            ))
	      (:let-var 
	        (append
	          ;(list (list :const (third expr)))
	          (litoasm (third expr) env)
	          (list (list :store))
	          ))
	      ;(lisp2li '(defun aaa (x y z) (let ((a 5) (b 10)) (+ a x) (+ y b))) ())
	      ;(comp '(defun aaa (x y z) (let ((a 5) (b 10)) (+ a x) (+ y b))))
	      ;(vmeval 'vm '(defun aaa (x y z) (let ((a 5) (b 10)) (+ a x y b))))
	      (:let 
	        ;(print env)
	        (append
	          (maplitoasm (third expr) ())
	          ;(list (list :stack (second expr)))
	          (maplitoasm (fourth expr) ())
	          ))
	      (:unknown 
	        ;erreur ?
	        (let ((expr2 (lisp2li (second expr) (third expr))))          
	          (litoasm expr2 env)))
	      )))
	

	

	(defun calltoasm (expr n)
	  ;(print expr)
	  (if
	    (<= n 1)
	    ()
	    (cons (list :call expr) (calltoasm expr (- n 1))))
	    )
	

	(defun maplitoasm (lcode env)
	  (if (atom lcode)
	      ()
	      (append
	       (litoasm (first lcode) env)
	       (maplitoasm (cdr lcode) env))))
